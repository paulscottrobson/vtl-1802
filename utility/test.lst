 AS V1.42 Beta [Bld 114] - source file test.asm - page 1 - 9/1/2017 23:07:52


       1/       0 :                     
       2/       0 :                     	cpu 	1802
       3/       0 :                     	
       4/       0 : =0H                 r0 = 0
       5/       0 : =1H                 r1 = 1
       6/       0 : =2H                 r2 = 2
       7/       0 : =3H                 r3 = 3
       8/       0 : =4H                 r4 = 4
       9/       0 : =5H                 r5 = 5
      10/       0 :                     
      11/       0 :                     
      12/       0 :                     return macro
      13/       0 :                     	dis
      14/       0 :                     	endm
      15/       0 :                     
      16/       0 : =EH                 rParam1 = 14
      17/       0 : =FH                 rParam2 = 15
      18/       0 :                     
      19/       0 :                     
      20/       0 :                     ldr macro 	r,n
      21/       0 :                     	ldi 	(n)/256
      22/       0 :                     	phi 	r
      23/       0 :                     	ldi 	(n)&255
      24/       0 :                     	plo 	r
      25/       0 :                     	endm
      26/       0 :                     
      27/       0 :                     
      28/       0 : 71                  	dis
      29/       1 : 00                  	db 		0
      30/       2 :                     
      31/       2 : (MACRO)             	ldr 	r2,03FFFh
      31/       2 : F8 3F                       ldi     (03FFFH)/256
      31/       4 : B2                          phi     R2
      31/       5 : F8 FF                       ldi     (03FFFH)&255
      31/       7 : A2                          plo     R2
      32/       8 : E2                  	sex 	r2
      33/       9 : (MACRO)             	ldr 	rParam1,51132 	; result 4DFr5
      33/       9 : F8 C7                       ldi     (51132)/256
      33/       B : BE                          phi     RPARAM1
      33/       C : F8 BC                       ldi     (51132)&255
      33/       E : AE                          plo     RPARAM1
      34/       F : (MACRO)             	ldr 	rParam2,41
      34/       F : F8 00                       ldi     (41)/256
      34/      11 : BF                          phi     RPARAM2
      34/      12 : F8 29                       ldi     (41)&255
      34/      14 : AF                          plo     RPARAM2
      35/      15 : (MACRO)             	ldr 	r3,Divide
      35/      15 : F8 00                       ldi     (DIVIDE)/256
      35/      17 : B3                          phi     R3
      35/      18 : F8 22                       ldi     (DIVIDE)&255
      35/      1A : A3                          plo     R3
      36/      1B :                     
      37/      1B : 79                  	mark	
      38/      1C : D3                  	sep 	r3
      39/      1D : 22                  	dec 	r2
      40/      1E :                     
      41/      1E :                     wait:
      42/      1E : 30 1E               	br 	wait
      43/      20 :                     
      44/      20 :                     
 AS V1.42 Beta [Bld 114] - source file test.asm - page 2 - 9/1/2017 23:07:52


      45/      20 :                     	include 	divide.asm
(1)    1/      20 :                     ; ***************************************************************************************************************
(1)    2/      20 :                     ; ***************************************************************************************************************
(1)    3/      20 :                     ;
(1)    4/      20 :                     ;		File:		divide.asm
(1)    5/      20 :                     ;		Purpose:	Divide two 16 bit integers.
(1)    6/      20 :                     ;		Author:		Paul Robson (paul@robsons.org.uk)
(1)    7/      20 :                     ;		Date:		9th January 2017.
(1)    8/      20 :                     ;		Size: 		54 bytes.
(1)    9/      20 :                     ;
(1)   10/      20 :                     ; ***************************************************************************************************************
(1)   11/      20 :                     ; ***************************************************************************************************************
(1)   12/      20 :                     
(1)   13/      20 :                     ; *******************************************************************************************************************
(1)   14/      20 :                     ;
(1)   15/      20 :                     ;				Calculate rParam1 / rParam2.  Result in rParam1. Remainder in rParam2.
(1)   16/      20 :                     ;
(1)   17/      20 :                     ; *******************************************************************************************************************
(1)   18/      20 :                     
(1)   19/      20 :                     __DIVExit:
(1)   20/      20 : 12                  	inc 	r2 															; point to XP on the stack
(1)   21/      21 : (MACRO)             	return
(1)   21/      21 : 71                          dis
(1)   22/      22 :                     
(1)   23/      22 :                     Divide:
(1)   24/      22 : E2                  	sex 	r2 															; back using R2 as the index register
(1)   25/      23 :                     																		; rParam1 is the dividend.
(1)   26/      23 :                     																		; rParam2 is the remainder.
(1)   27/      23 :                     																		; tos is [divisor:2][counter:1] 
(1)   28/      23 :                     
(1)   29/      23 : F8 10               	ldi 	16															; push counter on stack - 16 because post	
(1)   30/      25 : 73                  	stxd 																; decrements in main loop.
(1)   31/      26 :                     
(1)   32/      26 : 9F                  	ghi 	rParam2 													; push divisor on stack.
(1)   33/      27 : 73                  	stxd
(1)   34/      28 : 8F                  	glo 	rParam2
(1)   35/      29 : 52                  	str 	r2 	
(1)   36/      2A :                     	
(1)   37/      2A : F8 00               	ldi 	0 															; clear the remainder
(1)   38/      2C : BF                  	phi 	rParam2
(1)   39/      2D : AF                  	plo 	rParam2
(1)   40/      2E : F4                  	add 																; anything + 0 clears DF.
(1)   41/      2F :                     
(1)   42/      2F :                     __DIVLoopIncR2IncR2:
(1)   43/      2F : 12                  	inc		r2 															; point R2 back to the counter.
(1)   44/      30 :                     __DIVLoopIncR2:
(1)   45/      30 : 12                  	inc 	r2
(1)   46/      31 :                     
(1)   47/      31 :                     __DIVLoop:
(1)   48/      31 :                     
(1)   49/      31 : 8E                  	glo 	rParam1 													; shift DF into dividend, shift old bit 15 to DF
(1)   50/      32 : 7E                  	rshl
(1)   51/      33 : AE                  	plo 	rParam1
(1)   52/      34 : 9E                  	ghi 	rParam1
(1)   53/      35 : 7E                  	rshl
(1)   54/      36 : BE                  	phi 	rParam1
(1)   55/      37 :                     
(1)   56/      37 : 02                  	ldn 	r2 															; look at counter.
(1)   57/      38 : 32 20               	bz 		__DIVExit 													; if zero then complete (decrement done later)
(1)   58/      3A :                     
 AS V1.42 Beta [Bld 114] - source file test.asm(divide.asm) - page 3 - 9/1/2017 23:07:52


(1)   59/      3A : 8F                  	glo	 	rParam2 													; shift DF into then remainder (rParam2)
(1)   60/      3B : 7E                  	rshl
(1)   61/      3C : AF                  	plo 	rParam2
(1)   62/      3D : 9F                  	ghi 	rParam2
(1)   63/      3E : 7E                  	rshl
(1)   64/      3F : BF                  	phi 	rParam2
(1)   65/      40 :                     
(1)   66/      40 : 02                  	ldn 	r2 															; decrement the counter (AFTER the test)
(1)   67/      41 : FF 01               	smi 	1
(1)   68/      43 : 73                  	stxd 																; when saving back, point R2 to divisor LSB.
(1)   69/      44 : 22                  	dec 	r2
(1)   70/      45 :                     
(1)   71/      45 : 8F                  	glo 	rParam2 													; calculate remainder.0 - divisor.0
(1)   72/      46 : F7                  	sm
(1)   73/      47 : 22                  	dec 	r2 															; save the interim value below the LSB.
(1)   74/      48 : 52                  	str 	r2
(1)   75/      49 : 12                  	inc 	r2 															; to LSB
(1)   76/      4A : 12                  	inc		r2 															; to MSB
(1)   77/      4B : 9F                  	ghi 	rParam2 													; calculate remainder.1 - divisor.1
(1)   78/      4C : 77                  	smb
(1)   79/      4D :                     
(1)   80/      4D : 3B 30               	bnf 	__DIVLoopIncR2 												; if DF = 0 then inc r2 (to ctr) and loop back
(1)   81/      4F :                     
(1)   82/      4F : BF                  	phi 	rParam2 													; copy result to remainder
(1)   83/      50 : 22                  	dec 	r2 															; to divisor.0
(1)   84/      51 : 22                  	dec 	r2 															; to temp result
(1)   85/      52 : 42                  	lda 	r2 															; get temp result, to divisor.0
(1)   86/      53 : AF                  	plo 	rParam2
(1)   87/      54 : 30 2F               	br 		__DIVLoopIncR2IncR2 										; go back, inc r2 twice to counter
(1)   88/      56 :                     
      46/      56 :                     	include 	atoi.asm
(1)    1/      56 :                     ; ***************************************************************************************************************
(1)    2/      56 :                     ; ***************************************************************************************************************
(1)    3/      56 :                     ;
(1)    4/      56 :                     ;		File:		atoi.asm
(1)    5/      56 :                     ;		Purpose:	Extract 16 bit integer from ASCII string.
(1)    6/      56 :                     ;		Author:		Paul Robson (paul@robsons.org.uk)
(1)    7/      56 :                     ;		Date:		9th January 2017.
(1)    8/      56 :                     ;		Size: 		67 bytes.
(1)    9/      56 :                     ;
(1)   10/      56 :                     ; ***************************************************************************************************************
(1)   11/      56 :                     ; ***************************************************************************************************************
(1)   12/      56 :                     
(1)   13/      56 :                     ; *******************************************************************************************************************
(1)   14/      56 :                     ;
(1)   15/      56 :                     ;	Takes one value in rParam1, pointer to a string, returns number read in rParam2.
(1)   16/      56 :                     ;	rParam1 points to the next character after the last one of the number.	
(1)   17/      56 :                     ;	
(1)   18/      56 :                     ;	On exit non-zero if a digit was read.
(1)   19/      56 :                     ;
(1)   20/      56 :                     ; *******************************************************************************************************************
(1)   21/      56 :                     
(1)   22/      56 :                     __ATOIExit:
(1)   23/      56 : 2E                  	dec 	rParam1 													; undo the last read, wasn't a digit.
(1)   24/      57 : 42                  	lda 	r2 															; read the flag for 'digits read'
(1)   25/      58 : (MACRO)             	return
(1)   25/      58 : 71                          dis
(1)   26/      59 :                     
(1)   27/      59 :                     ASCIIToInteger:
(1)   28/      59 : E2                  	sex 	r2 															; index back at 2
 AS V1.42 Beta [Bld 114] - source file test.asm(atoi.asm) - page 4 - 9/1/2017 23:07:52


(1)   29/      5A : F8 00               	ldi 	0 															; clear number read
(1)   30/      5C : AF                  	plo 	rParam2
(1)   31/      5D : BF                  	phi 	rParam2
(1)   32/      5E : 52                  	str 	r2 															; [TOS] is count of digits read okay.
(1)   33/      5F :                     
(1)   34/      5F :                     __ATOILoop:
(1)   35/      5F : 4E                  	lda 	rParam1 													; read next character and bump
(1)   36/      60 : FB 20               	xri 	' ' 														; skip over spaces.
(1)   37/      62 : 32 5F               	bz 		__ATOILoop 												
(1)   38/      64 : FB 20               	xri 	' ' 														; fix it back.
(1)   39/      66 : FC C6               	adi 	255-'9' 													; will cause DF if >= '9'
(1)   40/      68 : 33 56               	bdf 	__ATOIExit
(1)   41/      6A : FC 0A               	adi 	10 															; adding 10 will cause NF if < '0'	
(1)   42/      6C : 3B 56               	bnf 	__ATOIExit
(1)   43/      6E :                     
(1)   44/      6E : 73                  	stxd 																; push digit value, current value of number
(1)   45/      6F : 9F                  	ghi 	rParam2  													; on stack.
(1)   46/      70 : 73                  	stxd
(1)   47/      71 : 8F                  	glo 	rParam2
(1)   48/      72 : 52                  	str 	r2
(1)   49/      73 :                     
(1)   50/      73 :                     __ATOIDoubleRParam2 macro 												; macro that doubles the value in rParam2
(1)   51/      73 :                     	glo 	rParam2 													
(1)   52/      73 :                     	shl
(1)   53/      73 :                     	plo 	rParam2
(1)   54/      73 :                     	ghi 	rParam2
(1)   55/      73 :                     	rshl
(1)   56/      73 :                     	phi 	rParam2
(1)   57/      73 :                     	endm
(1)   58/      73 :                     
(1)   59/      73 : (MACRO)             	__ATOIDoubleRParam2 												; rParam2 * 2
(1)   59/      73 : 8F                          glo     rParam2                                                                                                         
(1)   59/      74 : FE                          shl
(1)   59/      75 : AF                          plo     rParam2
(1)   59/      76 : 9F                          ghi     rParam2
(1)   59/      77 : 7E                          rshl
(1)   59/      78 : BF                          phi     rParam2
(1)   60/      79 : (MACRO)             	__ATOIDoubleRParam2 												; rParam2 * 4
(1)   60/      79 : 8F                          glo     rParam2                                                                                                         
(1)   60/      7A : FE                          shl
(1)   60/      7B : AF                          plo     rParam2
(1)   60/      7C : 9F                          ghi     rParam2
(1)   60/      7D : 7E                          rshl
(1)   60/      7E : BF                          phi     rParam2
(1)   61/      7F : 8F                  	glo 	rParam2 													; add stack values on there.
(1)   62/      80 : F4                  	add
(1)   63/      81 : AF                  	plo 	rParam2
(1)   64/      82 : 12                  	inc 	r2
(1)   65/      83 : 9F                  	ghi 	rParam2
(1)   66/      84 : 74                  	adc
(1)   67/      85 : BF                  	phi 	rParam2  													; so now rParam * 5
(1)   68/      86 : (MACRO)             	__ATOIDoubleRParam2 												; so now rParam * 10
(1)   68/      86 : 8F                          glo     rParam2                                                                                                         
(1)   68/      87 : FE                          shl
(1)   68/      88 : AF                          plo     rParam2
(1)   68/      89 : 9F                          ghi     rParam2
(1)   68/      8A : 7E                          rshl
(1)   68/      8B : BF                          phi     rParam2
(1)   69/      8C :                     
(1)   70/      8C : 12                  	inc 	r2 															; point to digit value
 AS V1.42 Beta [Bld 114] - source file test.asm(atoi.asm) - page 5 - 9/1/2017 23:07:52


(1)   71/      8D : 8F                  	glo 	rParam2
(1)   72/      8E : F4                  	add
(1)   73/      8F : AF                  	plo 	rParam2
(1)   74/      90 : 9F                  	ghi 	rParam2
(1)   75/      91 : 7C 00               	adci 	0
(1)   76/      93 : BF                  	phi 	rParam2
(1)   77/      94 :                     
(1)   78/      94 : F8 FF               	ldi 	0FFh 														; set the 'read a digit' flag.
(1)   79/      96 : 52                  	str 	r2 
(1)   80/      97 : 30 5F               	br 		__ATOILoop
(1)   81/      99 :                     
      47/      99 :                     
      48/      99 :                     
 AS V1.42 Beta [Bld 114] - source file test.asm - page 6 - 9/1/2017 23:07:52


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :                                        x86_64-unknown-linux - |
*ASCIITOINTEGER :                59 C | *BIGENDIAN :                      0 - |
*BRANCHEXT :                      0 - | *CASESENSITIVE :                  0 - |
*CONSTPI :        3.141592653589793 - | *DATE :                    9/1/2017 - |
 DIVIDE :                        22 C | *FALSE :                          0 - |
*FULLPMMU :                       1 - | *HAS64 :                          1 - |
*HASDSP :                         0 - | *HASFPU :                         0 - |
*HASPMMU :                        0 - | *INEXTMODE :                      0 - |
*INLWORDMODE :                    0 - | *INMAXMODE :                      0 - |
*INSRCMODE :                      0 - | *INSUPMODE :                      0 - |
*LISTON :                         1 - | *MACEXP :                         1 - |
*MOMCPU :                      1802 - | *MOMCPUNAME :                  1802 - |
*NESTMAX :                      100 - | *PACKING :                        0 - |
*PADDING :                        1 - | *R0 :                             0 - |
*R1 :                             1 - |  R2 :                             2 - |
 R3 :                             3 - | *R4 :                             4 - |
*R5 :                             5 - | *RELAXED :                        0 - |
 RPARAM1 :                        E - |  RPARAM2 :                        F - |
*TIME :                    23:07:52 - | *TRUE :                           1 - |
*VERSION :                     142F - |  WAIT :                          1E C |
 __ATOIEXIT :                    56 C |  __ATOILOOP :                    5F C |
 __DIVEXIT :                     20 C | *__DIVLOOP :                     31 C |
 __DIVLOOPINCR2 :                30 C |  __DIVLOOPINCR2INCR2 :           2F C |

     45 symbols
     34 unused symbols

 AS V1.42 Beta [Bld 114] - source file test.asm - page 7 - 9/1/2017 23:07:52


  defined macros:
  ---------------

LDR                                   | RETURN                               
__ATOIDOUBLERPARAM2                   |

      3 macros

 AS V1.42 Beta [Bld 114] - source file test.asm - page 8 - 9/1/2017 23:07:52


  codepages:
  ----------

STANDARD (0 changed characters)


0.00 seconds assembly time

    217 lines source file
    253 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
