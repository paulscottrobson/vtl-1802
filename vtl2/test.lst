 AS V1.42 Beta [Bld 114] - source file test.asm - page 1 - 8/1/2017 19:40:54


       1/       0 :                     
       2/       0 :                     	cpu 	1802
       3/       0 :                     	
       4/       0 : =0H                 r0 = 0
       5/       0 : =1H                 r1 = 1
       6/       0 : =2H                 r2 = 2
       7/       0 : =3H                 r3 = 3
       8/       0 : =4H                 r4 = 4
       9/       0 : =5H                 r5 = 5
      10/       0 :                     
      11/       0 :                     
      12/       0 : =9H                 rVarPtr = 9 													; variable pointer.
      13/       0 : =AH                 rExpression = 10 												; pointer to string expression.
      14/       0 : =BH                 rStackSave = 11 												; original stack value.
      15/       0 : =CH                 rParenDepth = 12 												; (lower) parenthesis depth.
      16/       0 : =DH                 rCounter = 13 													; used in multiply and divide.
      17/       0 : =EH                 rResult = 14 							
      18/       0 : =EH                 rRemainder = 14
      19/       0 : =EH                 rTemp = 14
      20/       0 : =FH                 rRValue = 15
      21/       0 :                     
      22/       0 : 71                  	dis
      23/       1 : 00                  	db 		0
      24/       2 : F8 40               	ldi 	040h 												; set up stack.
      25/       4 : B2                  	phi 	r2
      26/       5 : F8 00               	ldi 	000h
      27/       7 : A2                  	plo 	r2
      28/       8 : E2                  	sex 	r2
      29/       9 : F8 00               	ldi 	sExpression/256 									; set up string pointer.
      30/       B : BA                  	phi 	rExpression
      31/       C : F8 15               	ldi 	sExpression&255
      32/       E : AA                  	plo 	rExpression
      33/       F :                     
      34/       F : F8 3E               	ldi 	03Eh 												; variables in this page.
      35/      11 : B9                  	phi 	rVarPtr
      36/      12 :                     
      37/      12 : C0 00 2F            	lbr 	EXPRession
      38/      15 :                     
      39/      15 :                     sExpression:
      40/      15 : 20 22 34 22 20 35   	db 		" \"4\" 5) comment"
                    29 20 63 6F 6D 6D 
                    65 6E 74 
      41/      24 :                     
      42/      24 :                     	include expression.asm
(1)    1/      24 :                     ; ***************************************************************************************************************
(1)    2/      24 :                     ; ***************************************************************************************************************
(1)    3/      24 :                     ;
(1)    4/      24 :                     ;		File:		expression.asm
(1)    5/      24 :                     ;		Purpose:	16 bit expression evaluator
(1)    6/      24 :                     ;		Author:		Paul Robson (paul@robsons.org.uk)
(1)    7/      24 :                     ;		Date:		8th January 2017.
(1)    8/      24 :                     ;
(1)    9/      24 :                     ; ***************************************************************************************************************
(1)   10/      24 :                     ; ***************************************************************************************************************
(1)   11/      24 :                     
(1)   12/      24 :                     doubleRValue macro 												; double 16 bit value in rValue.
(1)   13/      24 :                     	glo 	rRValue
(1)   14/      24 :                     	shl
(1)   15/      24 :                     	plo 	rRValue
(1)   16/      24 :                     	ghi 	rRValue
 AS V1.42 Beta [Bld 114] - source file test.asm(expression.asm) - page 2 - 8/1/2017 19:40:54


(1)   17/      24 :                     	rshl
(1)   18/      24 :                     	phi 	rRValue
(1)   19/      24 :                     	endm
(1)   20/      24 :                     
(1)   21/      24 :                     
(1)   22/      24 :                     EXPRPageAddress:
(1)   23/      24 :                     
(1)   24/      24 :                     ; ***************************************************************************************************************
(1)   25/      24 :                     ;
(1)   26/      24 :                     ;		Exit. We restore the stack because we don't know if/where we have crashed out - there is no
(1)   27/      24 :                     ;		error reporting at all. Then we get whatever the value on the stack was. If it worked right
(1)   28/      24 :                     ;		this is the expression value. If not, it will probably be 0.
(1)   29/      24 :                     ;
(1)   30/      24 :                     ; ***************************************************************************************************************
(1)   31/      24 :                     
(1)   32/      24 :                     EXPRExit:
(1)   33/      24 : 8B                  	glo 	rStackSave 											; restore the stack
(1)   34/      25 : A2                  	plo 	r2
(1)   35/      26 : 9B                  	ghi 	rStackSave
(1)   36/      27 : B2                  	phi 	r2
(1)   37/      28 : 22                  	dec 	r2 													; look at value on TOS.
(1)   38/      29 : 22                  	dec 	r2
(1)   39/      2A : 42                  	lda 	r2 													; LSB
(1)   40/      2B : AE                  	plo 	rResult
(1)   41/      2C : 42                  	lda 	r2 													; MSB and pointing at MARK data
(1)   42/      2D : BE                  	phi 	rResult
(1)   43/      2E : 70                  	ret 														; and return.
(1)   44/      2F :                     
(1)   45/      2F :                     ; ***************************************************************************************************************
(1)   46/      2F :                     ;
(1)   47/      2F :                     ;								Evaluate expression code starts here
(1)   48/      2F :                     ;
(1)   49/      2F :                     ; ***************************************************************************************************************
(1)   50/      2F :                     
(1)   51/      2F :                     EXPRession:
(1)   52/      2F : 82                  	glo 	r2 													; copy the stack start value to end value.
(1)   53/      30 : AB                  	plo 	rStackSave
(1)   54/      31 : 92                  	ghi 	r2
(1)   55/      32 : BB                  	phi 	rStackSave
(1)   56/      33 :                     
(1)   57/      33 : F8 00               	ldi 	0  													; clear the parenthesis depth.
(1)   58/      35 : AC                  	plo 	rParenDepth 	
(1)   59/      36 :                     
(1)   60/      36 :                     __EXPRNewExpression:
(1)   61/      36 : 22                  	dec 	r2 													; push two 00 on the stack.
(1)   62/      37 : 73                  	stxd
(1)   63/      38 : 73                  	stxd
(1)   64/      39 : F8 2B               	ldi 	'+' 												; push '+' on the stack.
(1)   65/      3B : 52                  	str 	r2
(1)   66/      3C :                     
(1)   67/      3C :                     ; ***************************************************************************************************************
(1)   68/      3C :                     ;
(1)   69/      3C :                     ;	Main loop. We have something on the stack (initially 0+) and are looking for a term to push on, which
(1)   70/      3C :                     ;	could be a variable, could be an integer constant or a side-effect variable (? or $)
(1)   71/      3C :                     ;
(1)   72/      3C :                     ; ***************************************************************************************************************
(1)   73/      3C :                     
(1)   74/      3C :                     __EXPRLoop: 													; main expression loop. looking for a term.
(1)   75/      3C :                     
(1)   76/      3C : 4A                  	lda 	rExpression 										; get the next character
 AS V1.42 Beta [Bld 114] - source file test.asm(expression.asm) - page 3 - 8/1/2017 19:40:54


(1)   77/      3D : 32 24               	bz 		EXPRexit 											; if NULL then exit
(1)   78/      3F : BE                  	phi 	rTemp 												; save in rTemp.1
(1)   79/      40 : FB 20               	xri 	' '													; skip spaces
(1)   80/      42 : 32 3C               	bz 		__EXPRLoop
(1)   81/      44 :                     
(1)   82/      44 : FB 02               	xri 	' '!'"'												; check for quote mark.
(1)   83/      46 : 32 93               	bz 		__EXPRCharacter
(1)   84/      48 :                     
(1)   85/      48 : 1C                  	inc 	rParenDepth 										; inc parenthesis depth for ( and :
(1)   86/      49 : FB 0A               	xri 	'"'!'('												; is it an open parenthesis ?
(1)   87/      4B : 32 36               	bz 		__EXPRNewExpression 								; if so, do a new expression with parenthesis bumped.
(1)   88/      4D : 9E                  	ghi 	rTemp												; get character read.
(1)   89/      4E : FC C6               	adi 	256-':'												; check for :
(1)   90/      50 : 32 9F               	bz 		__EXPRTermIsArray 									; if so, it is an array.
(1)   91/      52 : 2C                  	dec 	rParenDepth 								
(1)   92/      53 :                     
(1)   93/      53 : 33 A7               	bdf 	__EXPRTermIsVariable 								; if after : then it is a variable.
(1)   94/      55 : FC 0A               	adi 	10  												; checks 0-9 (colon follows 9)
(1)   95/      57 : 3B A7               	bnf 	__EXPRTermIsVariable 								; if before 0 then it is a variable.
(1)   96/      59 :                     
(1)   97/      59 :                     ; ***************************************************************************************************************
(1)   98/      59 :                     ;
(1)   99/      59 :                     ;											Reading in an unsigned integer.
(1)  100/      59 :                     ;
(1)  101/      59 :                     ; ***************************************************************************************************************
(1)  102/      59 :                     
(1)  103/      59 : AF                  	plo 	rRValue 											; first digit of a integer rValue
(1)  104/      5A : F8 00               	ldi 	0
(1)  105/      5C : BF                  	phi 	rRValue
(1)  106/      5D :                     __EXPRIntegerLoop:
(1)  107/      5D : 0A                  	ldn 	rExpression  										; read next character
(1)  108/      5E : 32 24               	bz 		EXPRExit	
(1)  109/      60 : FC C6               	adi 	256-':'												; check it is an integer.
(1)  110/      62 : 33 FF               	bdf		__EXPRPendingArithmetic 
(1)  111/      64 : FC 0A               	adi 	10
(1)  112/      66 : 3B FF               	bnf 	__EXPRPendingArithmetic 	
(1)  113/      68 :                     
(1)  114/      68 : 1A                  	inc 	rExpression 										; skip over new character
(1)  115/      69 : 22                  	dec 	r2 													; put new digit value on the stack
(1)  116/      6A : 73                  	stxd
(1)  117/      6B : 9F                  	ghi 	rRValue 											; put rValue on the stack (lo/hi)
(1)  118/      6C : 73                  	stxd
(1)  119/      6D : 8F                  	glo 	rRValue
(1)  120/      6E : 52                  	str 	r2
(1)  121/      6F :                     
(1)  122/      6F : (MACRO)             	doubleRValue 												; double the rValue twice
(1)  122/      6F : 8F                          glo     rRValue
(1)  122/      70 : FE                          shl
(1)  122/      71 : AF                          plo     rRValue
(1)  122/      72 : 9F                          ghi     rRValue
(1)  122/      73 : 7E                          rshl
(1)  122/      74 : BF                          phi     rRValue
(1)  123/      75 : (MACRO)             	doubleRValue
(1)  123/      75 : 8F                          glo     rRValue
(1)  123/      76 : FE                          shl
(1)  123/      77 : AF                          plo     rRValue
(1)  123/      78 : 9F                          ghi     rRValue
(1)  123/      79 : 7E                          rshl
(1)  123/      7A : BF                          phi     rRValue
(1)  124/      7B : 8F                  	glo 	rRValue 											; add the saved value
 AS V1.42 Beta [Bld 114] - source file test.asm(expression.asm) - page 4 - 8/1/2017 19:40:54


(1)  125/      7C : F4                  	add 
(1)  126/      7D : AF                  	plo 	rRValue
(1)  127/      7E : 12                  	inc 	r2
(1)  128/      7F : 9F                  	ghi 	rRValue
(1)  129/      80 : 74                  	adc
(1)  130/      81 : BF                  	phi 	rRValue
(1)  131/      82 : 12                  	inc 	r2 													; now points to the new digit.
(1)  132/      83 : (MACRO)             	doubleRValue 												; double rValue again (now x 10)
(1)  132/      83 : 8F                          glo     rRValue
(1)  132/      84 : FE                          shl
(1)  132/      85 : AF                          plo     rRValue
(1)  132/      86 : 9F                          ghi     rRValue
(1)  132/      87 : 7E                          rshl
(1)  132/      88 : BF                          phi     rRValue
(1)  133/      89 :                     
(1)  134/      89 : 8F                  	glo 	rRValue 											; add the new digit in with carry
(1)  135/      8A : F4                  	add
(1)  136/      8B : AF                  	plo 	rRValue
(1)  137/      8C : 9F                  	ghi 	rRValue
(1)  138/      8D : 7C 00               	adci 	0
(1)  139/      8F : BF                  	phi 	rRValue
(1)  140/      90 : 12                  	inc 	r2 													; throw the new digit
(1)  141/      91 : 30 5D               	br 		__EXPRIntegerLoop 									; and try the next character
(1)  142/      93 :                     
(1)  143/      93 :                     ; ***************************************************************************************************************
(1)  144/      93 :                     ;
(1)  145/      93 :                     ;											Found a character
(1)  146/      93 :                     ;
(1)  147/      93 :                     ; ***************************************************************************************************************
(1)  148/      93 :                     
(1)  149/      93 :                     __EXPRCharacter:
(1)  150/      93 : 4A                  	lda 	rExpression 										; get next character (after ") and bump.
(1)  151/      94 : 32 24               	bz 		EXPRExit 											; none provided
(1)  152/      96 : AF                  	plo 	rRValue 											; put into rRValue
(1)  153/      97 : F8 00               	ldi 	0 													; clear high byte
(1)  154/      99 : BF                  	phi 	rRValue
(1)  155/      9A : 4A                  	lda 	rExpression 										; get closing quote
(1)  156/      9B : 32 24               	bz 		EXPRExit 											; none provided, we don't error check in VTL
(1)  157/      9D : 30 FF               	br 		__EXPRPendingArithmetic 
(1)  158/      9F :                     
(1)  159/      9F :                     ; ***************************************************************************************************************
(1)  160/      9F :                     ;
(1)  161/      9F :                     ;	Found an array (e.g. :<expr>) ). This is treated as an extra level of parenthesis, but the final
(1)  162/      9F :                     ;	operator is 0@ not 0+ at the start, when evaluated this does the memory read.
(1)  163/      9F :                     ;
(1)  164/      9F :                     ; ***************************************************************************************************************
(1)  165/      9F :                     
(1)  166/      9F :                     __EXPRTermIsArray:
(1)  167/      9F : F8 40               	ldi 	'@' 												; push <dummy value> @ on the stack (array operator)
(1)  168/      A1 : 22                  	dec 	r2
(1)  169/      A2 : 73                  	stxd
(1)  170/      A3 : 73                  	stxd
(1)  171/      A4 : 52                  	str 	r2
(1)  172/      A5 : 30 3C               	br 		__EXPRLoop
(1)  173/      A7 :                     
(1)  174/      A7 :                     ; ***************************************************************************************************************
(1)  175/      A7 :                     ;
(1)  176/      A7 :                     ;							Found a variable - this is actually anything except  0-9 ( and :
(1)  177/      A7 :                     ;
(1)  178/      A7 :                     ; ***************************************************************************************************************
 AS V1.42 Beta [Bld 114] - source file test.asm(expression.asm) - page 5 - 8/1/2017 19:40:54


(1)  179/      A7 :                     
(1)  180/      A7 :                     __EXPRTermIsVariable:
(1)  181/      A7 : 9E                  	ghi 	rTemp 												; check for special cases ($ and ?) on RHS
(1)  182/      A8 : FB 24               	xri 	'$'													; which are input.
(1)  183/      AA : 32 B9               	bz 		__EXPRSpecialVariable
(1)  184/      AC : FB 1B               	xri 	'$'!'?'
(1)  185/      AE : 32 B9               	bz 		__EXPRSpecialVariable 
(1)  186/      B0 :                     
(1)  187/      B0 : 9E                  	ghi 	rTemp 												; ASCII value of variable x 2
(1)  188/      B1 : FE                  	shl 
(1)  189/      B2 : A9                  	plo 	rVarPtr 											; point to variable
(1)  190/      B3 :                     
(1)  191/      B3 : 49                  	lda 	rVarPtr 											; copy variable into rValue
(1)  192/      B4 : AF                  	plo 	rRValue
(1)  193/      B5 : 09                  	ldn 	rVarPtr
(1)  194/      B6 : BF                  	phi 	rRValue
(1)  195/      B7 : 30 FF               	br 		__EXPRPendingArithmetic 							; and now have term.
(1)  196/      B9 :                     
(1)  197/      B9 :                     ; ***************************************************************************************************************
(1)  198/      B9 :                     ;
(1)  199/      B9 :                     ;	Call the 'special variables' routine. Should put the value required into 'rRValue'
(1)  200/      B9 :                     ;
(1)  201/      B9 :                     ; ***************************************************************************************************************
(1)  202/      B9 :                     
(1)  203/      B9 :                     __EXPRSpecialVariable:
(1)  204/      B9 : F8 01               	ldi 	SpecialVariableHandler/256 							; prepare to call the SVHandler routine.
(1)  205/      BB : BE                  	phi 	rTemp
(1)  206/      BC : F8 02               	ldi 	SpecialVariableHandler&255
(1)  207/      BE : AE                  	plo 	rTemp 												; prepare for return
(1)  208/      BF : 2A                  	dec 	rExpression
(1)  209/      C0 : 4A                  	lda 	rExpression
(1)  210/      C1 : 22                  	dec 	r2
(1)  211/      C2 : 79                  	mark 		
(1)  212/      C3 : DE                  	sep 	rTemp 												; call the SVHandler, then fall through to pending sum.
(1)  213/      C4 :                     
(1)  214/      C4 :                     ; ***************************************************************************************************************
(1)  215/      C4 :                     ;
(1)  216/      C4 :                     ;	We now have <lterm> <op>  on the stack and the rValue in rRValue, so this does that stacked operation.
(1)  217/      C4 :                     ;
(1)  218/      C4 :                     ;	operations are * / + - > < = and @ (the array index psuedo op, internal only)
(1)  219/      C4 :                     ;
(1)  220/      C4 :                     ; ***************************************************************************************************************
(1)  221/      C4 :                     
(1)  222/      FF :                     	org 	(EXPRPageAddress/256)*256+100h-1
(1)  223/      FF :                     __EXPRPendingArithmetic:
(1)  224/      FF : 42                  	lda 	r2 													; get the pending operator off the stack.
(1)  225/     100 :                     
(1)  226/     100 :                     
(1)  227/     100 : 30 00               st:	br		st
(1)  228/     102 :                     
(1)  229/     102 :                     
(1)  230/     102 :                     
(1)  231/     102 :                     SpecialVariableHandler:
(1)  232/     102 : 12                  	inc 	r2
(1)  233/     103 : 70                  	ret
(1)  234/     104 :                     
(1)  235/     104 :                     ;
(1)  236/     104 :                     ; handle character constants not done so far.
(1)  237/     104 :                     ; add pending arithmetic + * / @ [- > < = group]
(1)  238/     104 :                     ; get the next operator and handle 0
 AS V1.42 Beta [Bld 114] - source file test.asm(expression.asm) - page 6 - 8/1/2017 19:40:54


(1)  239/     104 :                     ; push operator and loop back.
(1)  240/     104 :                     ; handle ) and unstacking
(1)  241/     104 :                     ;
(1)  242/     104 :                     
      43/     104 :                     
 AS V1.42 Beta [Bld 114] - source file test.asm - page 7 - 8/1/2017 19:40:54


  symbol table (* = unused):
  ------------------------

*ARCHITECTURE :                                        x86_64-unknown-linux - |
*BIGENDIAN :                      0 - | *BRANCHEXT :                      0 - |
*CASESENSITIVE :                  0 - | *CONSTPI :        3.141592653589793 - |
*DATE :                    8/1/2017 - |  EXPRESSION :                    2F C |
 EXPREXIT :                      24 C |  EXPRPAGEADDRESS :               24 C |
*FALSE :                          0 - | *FULLPMMU :                       1 - |
*HAS64 :                          1 - | *HASDSP :                         0 - |
*HASFPU :                         0 - | *HASPMMU :                        0 - |
*INEXTMODE :                      0 - | *INLWORDMODE :                    0 - |
*INMAXMODE :                      0 - | *INSRCMODE :                      0 - |
*INSUPMODE :                      0 - | *LISTON :                         1 - |
*MACEXP :                         1 - | *MOMCPU :                      1802 - |
*MOMCPUNAME :                  1802 - | *NESTMAX :                      100 - |
*PACKING :                        0 - | *PADDING :                        1 - |
*R0 :                             0 - | *R1 :                             1 - |
 R2 :                             2 - | *R3 :                             3 - |
*R4 :                             4 - | *R5 :                             5 - |
*RCOUNTER :                       D - | *RELAXED :                        0 - |
 REXPRESSION :                    A - |  RPARENDEPTH :                    C - |
*RREMAINDER :                     E - |  RRESULT :                        E - |
 RRVALUE :                        F - |  RSTACKSAVE :                     B - |
 RTEMP :                          E - |  RVARPTR :                        9 - |
 SEXPRESSION :                   15 C |  SPECIALVARIABLEHANDLER :       102 C |
 ST :                           100 C | *TIME :                    19:40:54 - |
*TRUE :                           1 - | *VERSION :                     142F - |
 __EXPRCHARACTER :               93 C |  __EXPRINTEGERLOOP :             5D C |
 __EXPRLOOP :                    3C C |  __EXPRNEWEXPRESSION :           36 C |
 __EXPRPENDINGARITHMETIC :       FF C |  __EXPRSPECIALVARIABLE :         B9 C |
 __EXPRTERMISARRAY :             9F C |  __EXPRTERMISVARIABLE :          A7 C |

     57 symbols
     35 unused symbols

 AS V1.42 Beta [Bld 114] - source file test.asm - page 8 - 8/1/2017 19:40:54


  defined macros:
  ---------------

DOUBLERVALUE                          |

      1 macro

 AS V1.42 Beta [Bld 114] - source file test.asm - page 9 - 8/1/2017 19:40:54


  codepages:
  ----------

STANDARD (0 changed characters)


0.01 seconds assembly time

    285 lines source file
    303 lines incl. macro expansions
      2 passes
      0 errors
      0 warnings
