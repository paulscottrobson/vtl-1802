// *******************************************************************************************************************************
// *******************************************************************************************************************************
//
//		Name:		hardware.cpp
//		Purpose:	Hardware Interface
//		Created:	1st November 2016
//		Author:		Paul Robson (paul@robsons.org.uk)
//
// *******************************************************************************************************************************
// *******************************************************************************************************************************

#include <stdlib.h>
#include "sys_processor.h"
#include "hardware.h"
#include "gfx.h"																// Want the keyboard access.

int isInitialised = 0;
BYTE8 videoRAM[512];
int x;
int pendingKey;

// *******************************************************************************************************************************
//													Hardware Reset
// *******************************************************************************************************************************

void HWIReset(void) {
	if (isInitialised == 0) {
		isInitialised = 1;
		for (WORD16 n = 0;n < 512;n++) videoRAM[n] = ' '; 					// Clear VRAM (wouldn't happen)
        videoRAM[15*32] = 127;
		pendingKey = 0;														// Clear keyboard buffer
        x = 0;                                                              // Home cursor to bottom right.
        char *msg = "*** 1802 Machine ***\r\r";
        while (*msg != '\0') HWIWriteVideoPort(*msg++);
	}
}

// *******************************************************************************************************************************
//											Process keys passed from debugger
// *******************************************************************************************************************************

BYTE8 HWIProcessKey(BYTE8 key,BYTE8 isRunMode) {
	if (isRunMode) {															// In run mode, push 0-9 A-F
    	if (key != 0 && isRunMode != 0) {										// Running and key press
        	BYTE8 newKey = GFXToASCII(key,1);									// Convert to ASCII
            if (newKey != 0) pendingKey = newKey;								// Put pending key in buffer
        }
	}
	return key;
}

// *******************************************************************************************************************************
//												Called at End of Frame
// *******************************************************************************************************************************

void HWIEndFrame(void) {
}

// *******************************************************************************************************************************
//														Read video memory 
// *******************************************************************************************************************************

BYTE8 HWIReadVideoMemory(WORD16 address) {
    return videoRAM[address];
}

// *******************************************************************************************************************************
//											Read keyboard
// *******************************************************************************************************************************

BYTE8 HWIReadKeyboard(void) {
	BYTE8 rv = 0;
	if (pendingKey != 0) {													// Key waiting.
		rv = pendingKey;                                                    // Return it.
		pendingKey = 0;														// Clear buffer
	}
	return rv;
}
// *******************************************************************************************************************************
//									Write byte to video memory port
// *******************************************************************************************************************************

void HWIWriteVideoPort(BYTE8 n) {
    n = n & 0x7F;
    if (x > 0 && n == 8) {
        HWIWriteVideoPort('^');
        HWIWriteVideoPort('H');
    }
    if (n == 13) {
        while (x < 32) {
            videoRAM[15*32+x] = ' ';
            x++;            
        }
    }
    if (n >= ' ') {
        videoRAM[15*32+x] = n;
        x++;
    }
    if (x == 32) {
        x = 0;
        for (WORD16 p = 0;p < 15*32;p++) videoRAM[p] = videoRAM[p+32];
        for (WORD16 p = 0;p < 32;p++) videoRAM[p+15*32] = ' ';
    }
    videoRAM[15*32+x] = 127;
}
